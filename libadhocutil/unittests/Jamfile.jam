import testing ;
import type ;
import generators ;

path-constant me : . ;
type.register TEXT : txt ;

generators.register-standard xxd.h : TEXT : H ;

project
	: requirements
			<toolset>tidy:<xcheckxx>hicpp-*
			<toolset>tidy:<xcheckxx>performance-*
	;

actions xxd.h
{
	( cd ./$(2:D) && xxd -i $(2:B).txt ) > $(1[1])
}

IMPORT $(__name__) : xxd.h : : xxd.h ;

lib boost_utf : : <name>boost_unit_test_framework ;
lib stdc++fs ;
lib pthread ;
lib dl ;

h lorem-ipsum : lorem-ipsum.txt ;

run
	testCompileTimeFormatter.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>stdc++fs
	<library>boost_utf
	<implicit-dependency>lorem-ipsum
	;

run
	testUriParse.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>stdc++fs
	<library>boost_utf
	:
	testUriParse
	;

run
	testContext.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testContext
	;

run
	testCurl.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>stdc++fs
	<implicit-dependency>..//adhocutil
	:
	testCurl
	;

run
	testBuffer.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testBuffer
	;

run
	testProcessPipes.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<define>ROOT=\"$(me)\"
	<library>..//adhocutil
	<library>boost_utf
	<library>stdc++fs
	:
	testProcessPipes
	;

run
	testMapFinds.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testMapFinds
	;

run
	testScopeExit.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testScopeExit
	;

run
	testLocks.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>pthread
	:
	testLocks
	;

run
	testLazyPointer.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testLazyPointer
	;

run
	testNvpParse.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testNvpParse
	;

run
	testCache.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>pthread
	:
	testCache
	;

lib utilTestClasses :
	utilTestClasses.cpp
	:
	<library>..//adhocutil
	: :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	;

run
	testDirs.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<define>ROOT=\"$(me)\"
	<library>stdc++fs
	:
	testDirs
	;

run
	testPlugins.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>utilTestClasses
	:
	testPlugins
	;

run
	testPluginsRuntime.cpp
	: : utilTestClasses :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>stdc++fs
	<library>dl
	<dependency>utilTestClasses
	:
	testPluginsRuntime
	;

run
	testFactory.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testFactory
	;

run
	testSemaphore.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>pthread
	:
	testSemaphore
	;

run
	testException.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	:
	testException
	;

run
	testResourcePool.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<library>pthread
	:
	testResourcePool
	;

run
	testFprintbf.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<define>ROOT=\"$(me)\"
	<library>stdc++fs
	:
	testFprintbf
	;

run
	testFileUtils.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<implicit-dependency>..//adhocutil
	<library>boost_utf
	<define>ROOT=\"$(me)\"
	<library>stdc++fs
	;

run
	testLexer.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	<define>ROOT=\"$(me)\"
	<library>stdc++fs
	;

run
	testOptionals.cpp
	: : :
	<define>BOOST_TEST_DYN_LINK
	<library>..//adhocutil
	<library>boost_utf
	;

